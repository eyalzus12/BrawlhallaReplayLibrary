[1mdiff --git a/Sample.cs b/Sample.cs[m
[1mindex 7f19389..91dba14 100644[m
[1m--- a/Sample.cs[m
[1m+++ b/Sample.cs[m
[36m@@ -1,4 +1,7 @@[m
[32m+[m[32musing System;[m
[32m+[m[32musing System.Collections;[m
 using System.IO;[m
[32m+[m[32musing System.Text;[m
 using System.Text.Json;[m
 using System.Text.Json.Serialization;[m
 [m
[36m@@ -28,4 +31,35 @@[m [minternal class Sample[m
         using FileStream outFile = new(outputPath, FileMode.Create, FileAccess.Write);[m
         JsonSerializer.Serialize(outFile, replay, JSON_OPTIONS);[m
     }[m
[32m+[m
[32m+[m[32m    // represent owned taunts as a bit string[m
[32m+[m[32m    private sealed class JsonOwnedTauntsConverter : JsonConverter<ReplayOwnedTaunts>[m
[32m+[m[32m    {[m
[32m+[m[32m        public override ReplayOwnedTaunts? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)[m
[32m+[m[32m        {[m
[32m+[m[32m            string? bitString = reader.GetString();[m
[32m+[m[32m            if (bitString is null)[m
[32m+[m[32m                return null;[m
[32m+[m[32m            BitArray bits = new(bitString.Length);[m
[32m+[m[32m            for (int i = 0; i < bitString.Length; ++i)[m
[32m+[m[32m            {[m
[32m+[m[32m                bits[i] = bitString[i] switch[m
[32m+[m[32m                {[m
[32m+[m[32m                    '0' => false,[m
[32m+[m[32m                    '1' => true,[m
[32m+[m[32m                    _ => throw new InvalidOperationException($"Invalid char {bitString[i]} in ReplayOwnedTaunts string")[m
[32m+[m[32m                };[m
[32m+[m[32m            }[m
[32m+[m[32m            return new(bits);[m
[32m+[m[32m        }[m
[32m+[m
[32m+[m[32m        public override void Write(Utf8JsonWriter writer, ReplayOwnedTaunts value, JsonSerializerOptions options)[m
[32m+[m[32m        {[m
[32m+[m[32m            BitArray bits = value.Bits;[m
[32m+[m[32m            StringBuilder builder = new(bits.Length);[m
[32m+[m[32m            foreach (bool bit in bits) builder.Append(bit ? '1' : '0');[m
[32m+[m[32m            string bitString = builder.ToString();[m
[32m+[m[32m            writer.WriteStringValue(bitString);[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/Exceptions/ReplayVersionException.cs b/src/Exceptions/ReplayVersionException.cs[m
[1mdeleted file mode 100644[m
[1mindex fe37ce2..0000000[m
[1m--- a/src/Exceptions/ReplayVersionException.cs[m
[1m+++ /dev/null[m
[36m@@ -1,11 +0,0 @@[m
[31m-using System;[m
[31m-[m
[31m-namespace BrawlhallaReplayLibrary;[m
[31m-[m
[31m-[Serializable][m
[31m-public class ReplayVersionException : Exception[m
[31m-{[m
[31m-    public ReplayVersionException() { }[m
[31m-    public ReplayVersionException(string message) : base(message) { }[m
[31m-    public ReplayVersionException(string message, Exception inner) : base(message, inner) { }[m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/src/Json/JsonOwnedTauntsConverter.cs b/src/Json/JsonOwnedTauntsConverter.cs[m
[1mdeleted file mode 100644[m
[1mindex 9edfc19..0000000[m
[1m--- a/src/Json/JsonOwnedTauntsConverter.cs[m
[1m+++ /dev/null[m
[36m@@ -1,37 +0,0 @@[m
[31m-using System;[m
[31m-using System.Collections;[m
[31m-using System.Text;[m
[31m-using System.Text.Json;[m
[31m-using System.Text.Json.Serialization;[m
[31m-[m
[31m-namespace BrawlhallaReplayLibrary;[m
[31m-[m
[31m-public class JsonOwnedTauntsConverter : JsonConverter<ReplayOwnedTaunts>[m
[31m-{[m
[31m-    public override ReplayOwnedTaunts? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)[m
[31m-    {[m
[31m-        string? bitString = reader.GetString();[m
[31m-        if (bitString is null)[m
[31m-            return null;[m
[31m-        BitArray bits = new(bitString.Length);[m
[31m-        for (int i = 0; i < bitString.Length; ++i)[m
[31m-        {[m
[31m-            bits[i] = bitString[i] switch[m
[31m-            {[m
[31m-                '0' => false,[m
[31m-                '1' => true,[m
[31m-                _ => throw new InvalidOperationException($"Invalid char {bitString[i]} in ReplayOwnedTaunts string")[m
[31m-            };[m
[31m-        }[m
[31m-        return new(bits);[m
[31m-    }[m
[31m-[m
[31m-    public override void Write(Utf8JsonWriter writer, ReplayOwnedTaunts value, JsonSerializerOptions options)[m
[31m-    {[m
[31m-        BitArray bits = value.Bits;[m
[31m-        StringBuilder builder = new(bits.Length);[m
[31m-        foreach (bool bit in bits) builder.Append(bit ? '1' : '0');[m
[31m-        string bitString = builder.ToString();[m
[31m-        writer.WriteStringValue(bitString);[m
[31m-    }[m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/src/Replay.cs b/src/Replay.cs[m
[1mindex 1d8b8d4..f97fbee 100644[m
[1m--- a/src/Replay.cs[m
[1m+++ b/src/Replay.cs[m
[36m@@ -5,6 +5,7 @@[m [mnamespace BrawlhallaReplayLibrary;[m
 [m
 public record Replay[m
     ([m
[32m+[m[32m        uint Version,[m
         ReplayHeader Header,[m
         ReplayGameData GameData,[m
         ReplayResult Result,[m
[36m@@ -14,7 +15,7 @@[m [mpublic record Replay[m
     )[m
 {[m
 [m
[31m-    public static Replay Load(Stream stream, bool ignoreChecksum = false, bool ignoreVersionMatch = false)[m
[32m+[m[32m    public static Replay Load(Stream stream, bool ignoreChecksum = false)[m
     {[m
         //decompress[m
         using MemoryStream bufferStream = new();[m
[36m@@ -28,11 +29,13 @@[m [mpublic record Replay[m
         //create bit stream[m
         BitStream bits = new(replayBytes);[m
         //create replay[m
[31m-        return CreateFrom(bits, ignoreChecksum, ignoreVersionMatch);[m
[32m+[m[32m        return CreateFrom(bits, ignoreChecksum);[m
     }[m
 [m
[31m-    internal static Replay CreateFrom(BitStream bits, bool ignoreChecksum = false, bool ignoreVersionMatch = false)[m
[32m+[m[32m    internal static Replay CreateFrom(BitStream bits, bool ignoreChecksum = false)[m
     {[m
[32m+[m[32m        uint version = bits.ReadUInt();[m
[32m+[m
         ReplayHeader? header = null;[m
         ReplayGameData? gameData = null;[m
         ReplayResult? result = null;[m
[36m@@ -100,16 +103,6 @@[m [mpublic record Replay[m
         if (!ignoreChecksum)[m
             gameData.ValidateChecksum();[m
 [m
[31m-        if (!ignoreVersionMatch)[m
[31m-        {[m
[31m-            if (header.Version != gameData.Version)[m
[31m-                throw new ReplayVersionException($"Replay header has version {header.Version} but game data has version {gameData.Version}");[m
[31m-            if (header.Version != result.Version)[m
[31m-                throw new ReplayVersionException($"Replay header has version {header.Version} but result has version {result.Version}");[m
[31m-            if (gameData.Version != result.Version)[m
[31m-                throw new ReplayVersionException($"Replay game data has version {gameData.Version} but result has version {result.Version}");[m
[31m-        }[m
[31m-[m
[31m-        return new(header, gameData, result, knockoutFaces, otherFaces, inputs);[m
[32m+[m[32m        return new(version, header, gameData, result, knockoutFaces, otherFaces, inputs);[m
     }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/ReplayObjects/ReplayGameData.cs b/src/ReplayObjects/ReplayGameData.cs[m
[1mindex 0cf0f67..dc459df 100644[m
[1m--- a/src/ReplayObjects/ReplayGameData.cs[m
[1m+++ b/src/ReplayObjects/ReplayGameData.cs[m
[36m@@ -9,7 +9,6 @@[m [mpublic record ReplayGameData[m
         uint LevelId,[m
         ushort HeroCount,[m
         ReadOnlyCollection<ReplayEntityData> Entities,[m
[31m-        uint Version,[m
         uint Checksum[m
     )[m
 {[m
[36m@@ -23,10 +22,9 @@[m [mpublic record ReplayGameData[m
         List<ReplayEntityData> entities = [];[m
         while (bits.ReadBool())[m
             entities.Add(ReplayEntityData.CreateFrom(bits, heroCount));[m
[31m-        uint version = bits.ReadUInt();[m
         uint checksum = bits.ReadUInt();[m
 [m
[31m-        return new(settings, levelId, heroCount, entities.AsReadOnly(), version, checksum);[m
[32m+[m[32m        return new(settings, levelId, heroCount, entities.AsReadOnly(), checksum);[m
     }[m
 [m
     public uint CalculateChecksum()[m
[1mdiff --git a/src/ReplayObjects/ReplayGameSettings.cs b/src/ReplayObjects/ReplayGameSettings.cs[m
[1mindex 7113277..49f6075 100644[m
[1m--- a/src/ReplayObjects/ReplayGameSettings.cs[m
[1m+++ b/src/ReplayObjects/ReplayGameSettings.cs[m
[36m@@ -15,7 +15,6 @@[m [mpublic record ReplayGameSettings[m
         uint ItemSpawnRuleSetId,[m
         uint WeaponSpawnRateId,[m
         uint GadgetSpawnRateId,[m
[31m-        uint Unused,[m
         ReplayGadgetSelectionEnum GadgetSelection,[m
         ReplayGadgetSelectFlags CustomGadgetSelection[m
     )[m
[36m@@ -35,7 +34,6 @@[m [mpublic record ReplayGameSettings[m
         uint itemSpawnRuleSetId = bits.ReadUInt();[m
         uint weaponSpawnRateId = bits.ReadUInt();[m
         uint gadgetSpawnRateId = bits.ReadUInt();[m
[31m-        uint unused = bits.ReadUInt();[m
         ReplayGadgetSelectionEnum gadgetSelection = (ReplayGadgetSelectionEnum)bits.ReadUInt();[m
         ReplayGadgetSelectFlags customGadgetSelection = (ReplayGadgetSelectFlags)bits.ReadUInt();[m
 [m
[36m@@ -53,7 +51,6 @@[m [mpublic record ReplayGameSettings[m
             ItemSpawnRuleSetId: itemSpawnRuleSetId,[m
             WeaponSpawnRateId: weaponSpawnRateId,[m
             GadgetSpawnRateId: gadgetSpawnRateId,[m
[31m-            Unused: unused,[m
             GadgetSelection: gadgetSelection,[m
             CustomGadgetSelection: customGadgetSelection[m
         );[m
[1mdiff --git a/src/ReplayObjects/ReplayHeader.cs b/src/ReplayObjects/ReplayHeader.cs[m
[1mindex 89d8396..23889e7 100644[m
[1m--- a/src/ReplayObjects/ReplayHeader.cs[m
[1m+++ b/src/ReplayObjects/ReplayHeader.cs[m
[36m@@ -5,7 +5,6 @@[m [mnamespace BrawlhallaReplayLibrary;[m
 public record ReplayHeader[m
     ([m
         uint RandomSeed,[m
[31m-        uint Version,[m
         uint PlaylistId,[m
         string? PlaylistName,[m
         bool OnlineGame[m
[36m@@ -14,10 +13,9 @@[m [mpublic record ReplayHeader[m
     internal static ReplayHeader CreateFrom(BitStream bits)[m
     {[m
         uint randomSeed = bits.ReadUInt();[m
[31m-        uint version = bits.ReadUInt();[m
         uint playlistId = bits.ReadUInt();[m
         string? playlistName = (playlistId != 0) ? bits.ReadString() : null;[m
         bool onlineGame = bits.ReadBool();[m
[31m-        return new(randomSeed, version, playlistId, playlistName, onlineGame);[m
[32m+[m[32m        return new(randomSeed, playlistId, playlistName, onlineGame);[m
     }[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/src/ReplayObjects/ReplayResult.cs b/src/ReplayObjects/ReplayResult.cs[m
[1mindex a82b45f..497cf82 100644[m
[1m--- a/src/ReplayObjects/ReplayResult.cs[m
[1m+++ b/src/ReplayObjects/ReplayResult.cs[m
[36m@@ -3,12 +3,11 @@[m [musing System.Collections.ObjectModel;[m
 [m
 namespace BrawlhallaReplayLibrary;[m
 [m
[31m-public record ReplayResult(uint Length, uint Version, ReadOnlyDictionary<byte, short> Scores, uint EndOfMatchFanfareId)[m
[32m+[m[32mpublic record ReplayResult(uint Length, ReadOnlyDictionary<byte, short> Scores, uint EndOfMatchFanfareId)[m
 {[m
     internal static ReplayResult CreateFrom(BitStream bits)[m
     {[m
         uint length = bits.ReadUInt();[m
[31m-        uint version = bits.ReadUInt();[m
         Dictionary<byte, short> scores = [];[m
         if (bits.ReadBool())[m
         {[m
[36m@@ -24,7 +23,7 @@[m [mpublic record ReplayResult(uint Length, uint Version, ReadOnlyDictionary<byte, s[m
         }[m
         uint endOfMatchFanfareId = bits.ReadUInt();[m
 [m
[31m-        return new(length, version, scores.AsReadOnly(), endOfMatchFanfareId);[m
[32m+[m[32m        return new(length, scores.AsReadOnly(), endOfMatchFanfareId);[m
     }[m
 [m
     internal static ReplayResult Merge(ReplayResult result1, ReplayResult result2)[m
[36m@@ -33,8 +32,6 @@[m [mpublic record ReplayResult(uint Length, uint Version, ReadOnlyDictionary<byte, s[m
             throw new InvalidReplayDataException($"First result has length {result1.Length}, but second has length {result2.Length}");[m
         if (result1.EndOfMatchFanfareId != result2.EndOfMatchFanfareId)[m
             throw new InvalidReplayDataException($"First result has EndOfMatchFanfareId {result1.EndOfMatchFanfareId}, but second has EndOfMatchFanfareId {result2.EndOfMatchFanfareId}");[m
[31m-        if (result1.Version != result2.Version)[m
[31m-            throw new ReplayVersionException($"First result has version {result1.Version}, but second has version {result2.Version}");[m
         Dictionary<byte, short> scores = [];[m
         foreach ((byte entId, short score) in result1.Scores)[m
         {[m
[36m@@ -46,6 +43,6 @@[m [mpublic record ReplayResult(uint Length, uint Version, ReadOnlyDictionary<byte, s[m
             scores.TryAdd(entId, 0);[m
             scores[entId] += score;[m
         }[m
[31m-        return new(result1.Length, result1.Version, scores.AsReadOnly(), result1.EndOfMatchFanfareId);[m
[32m+[m[32m        return new(result1.Length, scores.AsReadOnly(), result1.EndOfMatchFanfareId);[m
     }[m
 }[m
\ No newline at end of file[m
